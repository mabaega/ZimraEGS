@model ZimraEGS.Models.SetupViewModel

@{
    ViewData["Title"] = "Setup Wizard";
}

<div class="col-md-10 offset-md-1">

    <div class="card" id="wizardProfile">

        <form id="certInfoForm" action="/Setup/SaveCertificate" method="post">

            <input type="hidden" name="Referrer" value="@Model.Referrer" />
            <input type="hidden" name="BusinessDetails" value="@Model.BusinessDetails" />
            <input type="hidden" name="Api" value="@Model.Api" />
            <input type="hidden" name="Token" value="@Model.Token" />

            <input type="hidden" id="isFileReady" value="@Model.IsFileReady.ToString().ToLower()" />
            <input type="hidden" id="fileData" value="@Model.FileContent" />
            <input type="hidden" name="Filename" value="@Model.Filename" />

            <div class="card-header text-center">
                <h4 class="card-title">Manager - Zimra Integration</h4>
                <h5 class="card-description">Device Setup and Registration</h5>
            </div>

            <div class="wizard-navigation" id="wizardNav">
                <ul class="nav nav-pills nav-fill gap-3 p-2 small bg-transparent rounded-1 shadow-sm" id="pillNav2" role="tablist" style="--bs-nav-pills-link-active-bg: var(--bs-tertiary-bg); --bs-nav-link-color: var(--bs-secondary);">
                    <li class="nav-item">
                        <a class="nav-link rounded-5 active" data-bs-toggle="pill" href="#managerDataField" role="tab">Business Data Setup</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link rounded-5" data-bs-toggle="pill" href="#taxPayerInfo" role="tab">Verivy Tax Payer information</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link rounded-5" data-bs-toggle="pill" href="#deviceRegistration" role="tab">Device Registration</a>
                    </li>
                </ul>
            </div>


            <div class="card-body">
                <div class="tab-content">
                    <div class="tab-pane fade active show" id="managerDataField" role="tabpanel">
                        <!-- Business Data Setup Section -->
                        <div class="row text-center mt-2">
                            <div class="col-md-12">
                                <div class="border border-tertiary rounded p-4">
                                    <p class="mb-1">
                                        <span style="font-weight: bold;">Business Data Setup</span>
                                    </p>
                                    <hr />
                                    <p class="mb-2">
                                        This page will help you create or update custom fields and footers required in Manager with Zimra Integration.
                                    </p>
                                    <p class="mb-2">
                                        <b>*Clone/Backup your business data for Trial*</b><br />
                                        <i>Try all types of Invoices you have, if all works without any problem, you are ready to enter Core Environment using your real business Data.</i><br />
                                    </p>
                                    <div class="mt-3 text-center">
                                        <button type="button" id="generateCustomField" class="btn btn-outline-primary btn-sm">Update Business Data</button>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <div class="row text-center mt-2">
                            <div class="col-md-12">
                                <div class="border border-tertiary rounded p-4">
                                    <p class="mb-1">
                                        <span style="font-weight: bold;">The next step is to register the Device according to your FDMS Registration.</span>
                                    </p>
                                    <hr />
                                    <p class="mb-2">
                                        <span style="font-weight: bold;">Generate CSR and Private Key:</span><br />
                                        Enter your business data correctly. This data will be used to create the CSR and Private Key, and it will also appear on the eInvoice XML generated by ZimraEGS.
                                    </p>
                                    <p class="mb-2">
                                        <span style="font-weight: bold;">Register Device:</span><br />
                                        Make sure you have an OTP to get a Compliant CSID. Log in to the Fatoora Portal using your VAT number and generate an OTP there.
                                    </p>
                                    <p class="mb-2">
                                        <span style="font-weight: bold;">Get Server Certificate</span><br />
                                        The PCSID is the certificate used to sign the invoice before reporting it to the Fatoora portal. After completing this process, your onboarded devices should be listed on the Fatoora portal, indicating successful integration.
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="tab-pane fade" id="taxPayerInfo" role="tabpanel">
                        <div class="row text-start">
                            <!-- form content -->
                            <div class="col-md-12 mb-2 mt-2">
                                <div class="border border-tertiary rounded p-3">
                                    <!-- Input form -->
                                    <div class="row">

                                        <div class="col-md-2 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.DeviceID">Device ID</label>
                                                <input asp-for="@Model.CertificateInfo.DeviceID" class="form-control form-control-sm readonly-control" />
                                            </div>
                                        </div>

                                        <div class="col-md-2 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.DeviceModelName">Model Name</label>
                                                <input asp-for="@Model.CertificateInfo.DeviceModelName" class="form-control form-control-sm readonly-control" />
                                                <span asp-validation-for="@Model.CertificateInfo.DeviceModelName" class="text-danger"></span>
                                            </div>
                                        </div>

                                        <div class="col-md-2 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.DeviceModelVersion">Model Version</label>
                                                <input asp-for="@Model.CertificateInfo.DeviceModelVersion" class="form-control form-control-sm readonly-control" />
                                                <span asp-validation-for="@Model.CertificateInfo.DeviceModelVersion" class="text-danger"></span>
                                            </div>
                                        </div>

                                        <div class="col-md-2 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.DeviceSerialNumber">Serial Number</label>
                                                <input asp-for="@Model.CertificateInfo.DeviceSerialNumber" class="form-control form-control-sm readonly-control" />
                                            </div>
                                        </div>
                                        <div class="col-md-2 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.ActivationKey">Activation Key</label>
                                                <input asp-for="@Model.CertificateInfo.ActivationKey" class="form-control form-control-sm readonly-control" />
                                                <span asp-validation-for="@Model.CertificateInfo.ActivationKey" class="text-danger"></span>
                                            </div>
                                        </div>

                                        <div class="col-md-2 mb-3">
                                            <div class="form-group">
                                                <label style="color: var(--bs-success);" class="form-label" asp-for="@Model.CertificateInfo.IntegrationType">Integration Type</label>
                                                <select asp-for="@Model.CertificateInfo.IntegrationType" class="form-control form-control-sm">
                                                    @foreach (var value in Enum.GetValues(typeof(Zimra.ApiClient.Models.EnvironmentType)))
                                                    {
                                                        <option value="@value">@value</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <!-- Verify Tax Payer Information readonly -->
                                        <div class="col-md-3 offset-9 mb-3">
                                            <div class="form-group">
                                                <button style="width: 100%;" type="button" id="verifyTaxPayerButton" class="btn btn-outline-success btn-sm">Verify TaxPayer</button>
                                            </div>
                                        </div>

                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.TaxPayerName">TaxPayer Name</label>
                                                <input asp-for="@Model.CertificateInfo.TaxPayerName" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>

                                        <div class="col-md-3 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.TaxPayerTIN">TIN</label>
                                                <input asp-for="@Model.CertificateInfo.TaxPayerTIN" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>

                                        <div class="col-md-3 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.VatNumber">Vat Number</label>
                                                <input asp-for="@Model.CertificateInfo.VatNumber" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.DeviceBranchName">Device Branch Name</label>
                                                <input asp-for="@Model.CertificateInfo.DeviceBranchName" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>
                                        <div class="col-md-4 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.Email">Email</label>
                                                <input asp-for="@Model.CertificateInfo.Email" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>

                                        <div class="col-md-2 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.HouseNo">PhoneNo</label>
                                                <input asp-for="@Model.CertificateInfo.PhoneNo" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-3 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.Province">Province</label>
                                                <input asp-for="@Model.CertificateInfo.Province" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>

                                        <div class="col-md-3 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.City">City</label>
                                                <input asp-for="@Model.CertificateInfo.City" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>


                                        <div class="col-md-4 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.Street">Street</label>
                                                <input asp-for="@Model.CertificateInfo.Street" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>

                                        <div class="col-md-2 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.HouseNo">HouseNo</label>
                                                <input asp-for="@Model.CertificateInfo.HouseNo" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>

                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="tab-pane fade" id="deviceRegistration" role="tabpanel">

                        <div class="row text-start">

                            <div class="col-md-12 mb-2 mt-2">
                                <div class="border border-tertiary rounded p-3">

                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.CommonName">Common Name</label>
                                                <input asp-for="@Model.CertificateInfo.CommonName" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>
                                        <div class="col-md-3 mb-3"></div>
                                        <!-- Generate CSR-->
                                        <div class="col-md-3 mb-3" style="padding-top: 30px; text-align: right;">
                                            <button type="button" id="registerDeviceButton" class="btn btn-outline-primary btn-sm">Register Device</button>
                                        </div>
                                    </div>
                                    <div class="row">

                                        <div class="col-md-12 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.DeviceCertificate">Generated CSR</label>
                                                <textarea asp-for="@Model.CertificateInfo.GeneratedCSR" class="form-control form-control-sm" readonly></textarea>
                                            </div>
                                        </div>
                                        <div class="col-md-12 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.PrivateKey">Generated PrivateKey</label>
                                                <textarea asp-for="@Model.CertificateInfo.PrivateKey" class="form-control form-control-sm" readonly></textarea>
                                            </div>
                                        </div>
                                        <div class="col-md-12 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.DeviceCertificate">Device Certificate</label>
                                                <textarea asp-for="@Model.CertificateInfo.DeviceCertificate" class="form-control form-control-sm" readonly></textarea>
                                            </div>
                                        </div>
                                        <div class="col-md-12 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.Base64Pfx">Base64 Pfx</label>
                                                <textarea asp-for="@Model.CertificateInfo.Base64Pfx" class="form-control form-control-sm" readonly></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-6 mb-3"></div>
                                        <div class="col-md-3 mb-3"></div>
                                        <div class="col-md-3 mb-3" style="text-align: right;">
                                            <button type="button" id="getConfigButton" class="btn btn-outline-primary btn-sm">Get Device Config</button>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-3 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.DeviceOperatingMode">DeviceOperatingMode</label>
                                                <input asp-for="@Model.CertificateInfo.DeviceOperatingMode" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>
                                        <div class="col-md-3 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.TaxPayerDayMaxHrs">TaxPayerDayMaxHrs</label>
                                                <input asp-for="@Model.CertificateInfo.TaxPayerDayMaxHrs" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>
                                        <div class="col-md-3 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.TaxpayerDayEndNotificationHrs">TaxpayerDayEndNotificationHrs</label>
                                                <input asp-for="@Model.CertificateInfo.TaxpayerDayEndNotificationHrs" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>
                                        <div class="col-md-3 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.CertificateValidTill">CertificateValidTill</label>
                                                <input asp-for="@Model.CertificateInfo.CertificateValidTill" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.ApplicableTaxes">ApplicableTaxes</label>
                                                <input asp-for="@Model.CertificateInfo.ApplicableTaxes" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <div class="form-group">
                                                <label class="form-label" asp-for="@Model.CertificateInfo.QrUrl">QrUrl</label>
                                                <input asp-for="@Model.CertificateInfo.QrUrl" class="form-control form-control-sm" readonly />
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <div class="card-footer">

                <button type="button" class="btn btn-outline-secondary btn-sm" name="backToManager" onclick="window.location.href='@Model.Referrer'">Back to Manager</button>

                <button type="button" class="btn btn-outline-secondary btn-sm" name="previous">Previous</button>

                <button type="button" class="btn btn-outline-secondary btn-sm ml-auto" name="next">Next</button>

                <button id="downloadCertificateButton" type="submit" class="btn btn-outline-primary btn-sm" name="finish" disabled>Download Certificate Info</button>

            </div>

        </form>

    </div>
</div>

<div class="loading-indicator" id="loadingIndicator"></div>


@section Scripts {

    <script>
        $(function () {
            var $tabs = $('.tab-pane');
            var $navLinks = $('#wizardNav .nav-link');
            var currentIndex = 0;

            function showLoading() {
                document.getElementById('loadingIndicator').style.display = 'block';
            }

            function hideLoading() {
                document.getElementById('loadingIndicator').style.display = 'none';
            }

            function updateButtons() {
                var isFirstTab = currentIndex === 0;
                var isLastTab = currentIndex === $tabs.length - 1;

                $('[name="previous"]').toggleClass('d-none', isFirstTab);
                $('[name="next"]').toggleClass('d-none', isLastTab);
                $('[name="finish"]').toggleClass('d-none', !isLastTab);
                $('[name="backToManager"]').toggleClass('d-none', !isFirstTab);

                $navLinks.removeClass('active');
                $navLinks.eq(currentIndex).addClass('active');
            }

            function handleTabShown(tabId) {

                if (tabId === "deviceRegistration") {
                    var deviceSNValue = $("#CertificateInfo_DeviceSerialNumber").val();
                    var deviceIdValue = $("#CertificateInfo_DeviceID").val();
                    var deviceIdString = String(deviceIdValue).padStart(10, '0');

                    if (deviceIdValue && deviceSNValue) {
                        var csrCommonName = "ZIMRA-" + deviceSNValue + "-" + deviceIdString;
                        $("#CertificateInfo_CommonName").val(csrCommonName);
                    }
                }
            }

            $('[name="next"]').on('click', function () {
                if (currentIndex < $tabs.length - 1) {
                    $tabs.eq(currentIndex).removeClass('active show');
                    currentIndex++;
                    $tabs.eq(currentIndex).addClass('active show');
                    handleTabShown($navLinks.eq(currentIndex).attr("href").substring(1));
                    updateButtons();
                }
            });

            $('[name="previous"]').on('click', function () {
                if (currentIndex > 0) {
                    $tabs.eq(currentIndex).removeClass('active show');
                    currentIndex--;
                    $tabs.eq(currentIndex).addClass('active show');
                    handleTabShown($navLinks.eq(currentIndex).attr("href").substring(1));
                    updateButtons();
                }
            });

            $navLinks.on('click', function (e) {
                e.preventDefault();
                var target = $(this).attr('href');
                currentIndex = $navLinks.index(this);
                $tabs.removeClass('active show');
                $(target).addClass('active show');
                handleTabShown(target.substring(1));
                updateButtons();
            });

            function updateControlAtribut(inputClass, isReadonly) {

                var specificInputs = document.querySelectorAll("." + inputClass);
                specificInputs.forEach(function (input) {
                    if (isReadonly) {
                        input.setAttribute("readonly", "readonly");
                    } else {
                        input.removeAttribute("readonly");
                    }
                });
            }

            $("#generateCustomField").on('click', async function () {
                try {
                    showLoading();
                    var apiEndpoint = $('#Api').val();
                    var apiToken = $('#Token').val();

                    if (!apiEndpoint || !apiToken) {
                        hideLoading();
                        alert('API Endpoint or API Secret cannot be empty. Please provide valid values.');
                        return;
                    }

                    const response = await fetch('/setup/GetCfData');

                    if (!response.ok) {
                        hideLoading();
                        alert('Failed to fetch JSON data');
                        throw new Error('Failed to fetch JSON data');
                    }

                    const jsonObject = await response.json();

                    let successCount = 0;
                    let failureCount = 0;

                    for (let entry of jsonObject.jsondata) {
                        const apiPath = entry.apipath;
                        const dataItems = Array.isArray(entry.data) ? entry.data : [entry.data]; // Normalize `data` to always be an array.

                        for (let dataItem of dataItems) {
                            const key = dataItem.Key;
                            const fullApiUrl = `${apiEndpoint}${apiPath}/${encodeURIComponent(key)}`;

                            try {
                                const result = await fetch(fullApiUrl, {
                                    method: 'PUT',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'Authorization': `Bearer ${apiToken}`
                                    },
                                    body: JSON.stringify(dataItem)
                                });

                                if (result.ok) {
                                    console.log(`Data sent successfully to ${fullApiUrl}`);
                                    successCount++;
                                } else {
                                    console.error(`Failed to send data to ${fullApiUrl}`);
                                    failureCount++;
                                }
                            } catch (err) {
                                console.error(`Error sending data to ${fullApiUrl}:`, err);
                                failureCount++;
                            }
                        }
                    }

                    hideLoading();

                    if (failureCount === 0) {
                        alert(`All ${successCount} API calls were successful!`);
                    } else {
                        alert(`${successCount} API calls were successful, but ${failureCount} failed.`);
                    }
                } catch (error) {
                    hideLoading();
                    console.error('An error occurred:', error);
                    alert('An error occurred while fetching JSON data: ' + error.message);
                }
            });

            $('#verifyTaxPayerButton').on('click', function () {
                showLoading();

                var VerifyTaxPayerDto = {
                    IntegrationType: $('#CertificateInfo_IntegrationType').val(),
                    DeviceID: parseInt($('#CertificateInfo_DeviceID').val(), 10),  // Convert to integer
                    DeviceSerialNumber: $('#CertificateInfo_DeviceSerialNumber').val(),
                    ActivationKey: $('#CertificateInfo_ActivationKey').val()
                };

                if (Object.values(VerifyTaxPayerDto).some(val => !val)) {
                    hideLoading();
                    alert("Please provide all required inputs for TaxPayer Verification Info.");
                    return;
                }

                $.ajax({
                    url: 'setup/verifytaxpayer',  // Pastikan path lengkap sesuai dengan route
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(VerifyTaxPayerDto, null, 2),  // Kirim data sebagai JSON
                    success: function (response) {
                        // Check if response is a string and parse it
                        if (typeof response === 'string') {
                            response = JSON.parse(response);
                        }
                        // Set the values in the form
                        $('#CertificateInfo_TaxPayerName').val(response.taxPayerName);
                        $('#CertificateInfo_TaxPayerTIN').val(response.taxPayerTIN);
                        $('#CertificateInfo_VatNumber').val(response.vatNumber);
                        $('#CertificateInfo_DeviceBranchName').val(response.deviceBranchName);
                        // Access nested properties
                        var deviceBranchAddress = response.deviceBranchAddress;
                        $('#CertificateInfo_Province').val(deviceBranchAddress.province);
                        $('#CertificateInfo_City').val(deviceBranchAddress.city);
                        $('#CertificateInfo_Street').val(deviceBranchAddress.street);
                        $('#CertificateInfo_HouseNo').val(deviceBranchAddress.houseNo);
                        // Access nested properties
                        var deviceBranchContacts = response.deviceBranchContacts;
                        $('#CertificateInfo_Email').val(deviceBranchContacts.email);
                        $('#CertificateInfo_PhoneNo').val(deviceBranchContacts.phoneNo);

                        checkTaxPayerInfo();
                        hideLoading();
                    },
                    error: function (xhr) {
                        hideLoading();
                        console.log("Raw response:", xhr.responseText); // Log the raw response
                        try {
                            // Parse the outer JSON response
                            const errorResponse = JSON.parse(xhr.responseText);

                            // If 'errors' exists, parse it; otherwise, use the original response
                            let errorDetails = errorResponse.errors ? JSON.parse(errorResponse.errors) : errorResponse;

                            // Show the formatted error details in an alert
                            alert("Error Details:\n" + JSON.stringify(errorDetails, null, 2)); // 2 spaces for indentation
                        } catch (e) {
                            console.error("Parsing error:", e); // Log the error
                            alert("Failed to parse JSON response. Raw response: " + xhr.responseText); // Alert the raw response
                        }
                    }
                });
            });

            $('#registerDeviceButton').on('click', function () {
                showLoading();

                var DeviceRegistrationDto = {
                    IntegrationType: $('#CertificateInfo_IntegrationType').val(),
                    DeviceID: parseInt($('#CertificateInfo_DeviceID').val(), 10),  // Convert to integer
                    DeviceSerialNumber: $('#CertificateInfo_DeviceSerialNumber').val(),
                    CommonName: $('#CertificateInfo_CommonName').val(), // Corrected
                    DeviceModelName: $('#CertificateInfo_DeviceModelName').val(),
                    DeviceModelVersion: $('#CertificateInfo_DeviceModelVersion').val(),
                    ActivationKey: $('#CertificateInfo_ActivationKey').val()
                };

                if (Object.values(DeviceRegistrationDto).some(val => !val)) {
                    hideLoading();
                    alert("Please provide all required inputs for Device Registration.");
                    return;
                }

                $.ajax({
                    url: 'setup/registerdevice',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(DeviceRegistrationDto, null, 2),
                    success: function (response) {
                        // Check if response is a string and parse it
                        if (typeof response === 'string') {
                            response = JSON.parse(response);
                        }

                        $('#CertificateInfo_GeneratedCSR').val(response.generatedCsr);
                        $('#CertificateInfo_PrivateKey').val(response.privateKey);
                        $('#CertificateInfo_DeviceCertificate').val(response.deviceCertificate);
                        $('#CertificateInfo_Base64Pfx').val(response.base64Pfx);

                        checkRegisterDeviceContainer();
                        hideLoading();
                    },
                    error: function (xhr) {
                        hideLoading();
                        console.log("Raw response:", xhr.responseText); // Log the raw response

                        try {
                            // Parse the outer JSON response
                            const errorResponse = JSON.parse(xhr.responseText);

                            // If 'errors' exists, parse it; otherwise, use the original response
                            let errorDetails = errorResponse.errors ? JSON.parse(errorResponse.errors) : errorResponse;

                            // Show the formatted error details in an alert
                            alert("Error Details:\n" + JSON.stringify(errorDetails, null, 2)); // 2 spaces for indentation
                        } catch (e) {
                            console.error("Parsing error:", e); // Log the error
                            alert("Failed to parse JSON response. Raw response: " + xhr.responseText); // Alert the raw response
                        }
                    }
                });
            });

            $('#getConfigButton').on('click', function () {

                showLoading();

                var GetConfigDto = {
                    IntegrationType: $('#CertificateInfo_IntegrationType').val(),
                    DeviceID: parseInt($('#CertificateInfo_DeviceID').val(), 10),  // Convert to integer
                    DeviceSerialNumber: $('#CertificateInfo_DeviceSerialNumber').val(),
                    DeviceModelName: $('#CertificateInfo_DeviceModelName').val(),
                    DeviceModelVersion: $('#CertificateInfo_DeviceModelVersion').val(),
                    PrivateKey: $('#CertificateInfo_PrivateKey').val(),
                    DeviceCertificate: $('#CertificateInfo_DeviceCertificate').val(),
                    Base64Pfx: $('#CertificateInfo_Base64Pfx').val()
                };

                console.log(JSON.stringify(GetConfigDto, null, 2));

                if (Object.values(GetConfigDto).some(val => !val)) {
                    hideLoading();
                    alert("Please provide all required inputs for Device Registration.");
                    return;
                }

                $.ajax({
                    url: 'setup/getconfig',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(GetConfigDto, null, 2),
                    success: function (response) {
                        // Check if response is a string and parse it

                        console.log(response);

                        if (typeof response === 'string') {
                            response = JSON.parse(response);
                        }
                        
                        $('#CertificateInfo_DeviceOperatingMode').val(response.deviceOperatingMode);
                        $('#CertificateInfo_ApplicableTaxes').val(response.applicableTaxes);
                        $('#CertificateInfo_TaxPayerDayMaxHrs').val(response.taxPayerDayMaxHrs);
                        $('#CertificateInfo_TaxpayerDayEndNotificationHrs').val(response.taxpayerDayEndNotificationHrs);

                        $('#CertificateInfo_CertificateValidTill').val(response.certificateValidTill);

                        $('#CertificateInfo_QrUrl').val(response.qrUrl);

                        checkGetConfigContainer();
                        hideLoading();
                    },
                    error: function (xhr) {
                        hideLoading();
                        console.log("Raw response:", xhr.responseText); // Log the raw response

                        try {
                            // Parse the outer JSON response
                            const errorResponse = JSON.parse(xhr.responseText);

                            // If 'errors' exists, parse it; otherwise, use the original response
                            let errorDetails = errorResponse.errors ? JSON.parse(errorResponse.errors) : errorResponse;

                            // Show the formatted error details in an alert
                            alert("Error Details:\n" + JSON.stringify(errorDetails, null, 2)); // 2 spaces for indentation
                        } catch (e) {
                            console.error("Parsing error:", e); // Log the error
                            alert("Failed to parse JSON response. Raw response: " + xhr.responseText); // Alert the raw response
                        }
                    }
                });
            });

            function checkTaxPayerInfo() {
                var taxPayerName = $("#CertificateInfo_TaxPayerName").val();
                var taxPayerTIN = $("#CertificateInfo_TaxPayerTIN").val();
                $("#verifyTaxPayerButton").toggleClass("d-none", !!(taxPayerName && taxPayerTIN));
                updateControlAtribut('readonly-control', !!(taxPayerName && taxPayerTIN));
            }

            function checkRegisterDeviceContainer() {
                var deviceCertificate = $("#CertificateInfo_DeviceCertificate").val();
                $("#registerDeviceButton").prop("disabled", !!(deviceCertificate));
                $("#getConfigButton").prop("disabled", !deviceCertificate);
            }
            function checkGetConfigContainer() {
                var qrUrl = $("#CertificateInfo_QrUrl").val();
                $("#registerDeviceButton").prop("disabled", !!(qrUrl));
                $("#downloadCertificateButton").prop("hidden", !qrUrl);
                $("#downloadCertificateButton").prop("disabled", !qrUrl);
            }

            $("#CertificateInfo_DeviceCertificate").on('input', function () {
                checkRegisterDeviceContainer();
            });

            $("#CertificateInfo_TaxPayerName, #CertificateInfo_TaxPayerTIN").on('input', checkTaxPayerInfo);

            // Initial setup
            updateButtons();
            handleTabShown($navLinks.eq(currentIndex).attr("href").substring(1));
            checkTaxPayerInfo();
            checkRegisterDeviceContainer();
            checkGetConfigContainer()
        });

    </script>


    <script type="text/javascript">

        document.addEventListener('DOMContentLoaded', function () {
            var isFileReady = '@Model.IsFileReady'.toLowerCase() === 'true';
            var businessDetails = @Html.Raw(Json.Serialize(Model.BusinessDetailsJson));
            var apiUrl = '@Model.Api' + '/business-details-form/38cf4712-6e95-4ce1-b53a-bff03edad273';
            var secretKey = '@Html.Raw(@Model.Token)';

            console.log(secretKey);

            var fileData = '@Html.Raw(Model.FileContent)';
            var fileName = '@Model.Filename';

            var message = "";


            if (isFileReady) {
                var payload;
                try {
                    payload = JSON.parse(businessDetails);
                    console.log('Parsed Payload:', payload);
                } catch (error) {
                    console.error("Error parsing businessDetails JSON:", error);
                    message += `Error parsing businessDetails JSON: ${error.message}\n`;
                    return;
                }

                if (payload) {
                    fetch(apiUrl, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-API-KEY': secretKey
                            //'Authorization': `Bearer ${secretKey}`
                        },
                        body: payload
                    })
                        .then(response => {
                            console.log('Network Response Status:', response.status);
                            return response.text().then(text => ({
                                status: response.status,
                                ok: response.ok,
                                body: text
                            }));
                        })
                        .then(response => {
                            if (response.ok) {
                                console.log('Update Zimra Reference successful!');
                                message += 'Update Zimra Reference: successful\n';
                            } else {
                                console.error('Error response body:', response.body);
                                message += `Update Zimra Reference Error: Network response was not ok. ${response.body}\n`;
                            }
                        })
                        .catch(error => {
                            console.error('Update Zimra Reference Error:', error.message);
                            message += `Update Zimra Reference Error: ${error.message}\n`;
                        })
                        .finally(() => {
                            if (isFileReady) {
                                if (fileData && fileName) {
                                    downloadFile(fileData, fileName);
                                } else {
                                    console.error('File data or filename is missing.');
                                    message += 'File data or filename is missing.\n';
                                }
                            }
                            alert(message);
                        });
                } else {
                    console.error("Payload is null or undefined");
                }
            }
        });

        function downloadFile(base64Data, fileName) {
            var binaryString = atob(base64Data);
            var binaryLen = binaryString.length;
            var bytes = new Uint8Array(binaryLen);

            for (var i = 0; i < binaryLen; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }

            var blob = new Blob([bytes], { type: "application/zip" });

            var link = document.createElement("a");
            var url = URL.createObjectURL(blob);
            link.href = url;
            link.download = fileName;

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }

    </script>

}

